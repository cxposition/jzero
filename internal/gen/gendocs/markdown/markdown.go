package markdown

import (
	"bytes"
	"os"
	"path/filepath"

	"github.com/zeromicro/go-zero/tools/goctl/util/pathx"

	"github.com/jzero-io/jzero/internal/gen/gendocs/parser"
)

type Markdown struct {
	apiDocsSpecs []*parser.DocsSpec
}

func New(docsSpecs []*parser.DocsSpec) *Markdown {
	return &Markdown{
		apiDocsSpecs: docsSpecs,
	}
}

func (m *Markdown) Generate() error {
	buf := bytes.NewBuffer(nil)

	// write title
	buf.WriteString(`# API
> generated by Jzero gen docs command
`)

	for _, group := range m.apiDocsSpecs {
		buf.WriteString("\n## " + group.Group + "\n")
	}

	if !pathx.FileExists(filepath.Join("desc", "docs", "md")) {
		_ = os.MkdirAll(filepath.Join("desc", "docs"), 0o755)
	}
	return os.WriteFile(filepath.Join("desc", "docs", "md", "index.md"), buf.Bytes(), 0o644)
}

//
//func (m *Markdown) generateGroup() []byte {
//	return nil
//}

//func (m *Markdown) generateRequestTypeTable() []byte {
//	for _, docsSpec := range m.docsSpecs {
//		for _, route := range docsSpec.GroupSpec.Routes {
//			buf := bytes.NewBuffer(nil)
//			buf.WriteString(`
//	| 字段名   | 字段类型 | 是否必填 | 位置 | 说明               |
//	| -------- | -------- | -------- | -------- |------------------ |
//	`)
//			paths := route.RequestType.(spec.DefineStruct).GetTagMembers("path")
//			for _, path := range paths {
//				buf.Write([]byte(fmt.Sprintf("| %s | %s | %t | %s | %s |", path.Name, path.Type.Name(), true, "path", path.Docs)))
//			}
//			fmt.Println(buf.String())
//		}
//	}
//	return nil
//}
