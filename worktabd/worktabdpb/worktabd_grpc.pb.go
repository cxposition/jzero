// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: worktabd.proto

package worktabdpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Worktabd_ServerVersion_FullMethodName = "/worktabdpb.worktabd/ServerVersion"
)

// WorktabdClient is the client API for Worktabd service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorktabdClient interface {
	ServerVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerVersionResponse, error)
}

type worktabdClient struct {
	cc grpc.ClientConnInterface
}

func NewWorktabdClient(cc grpc.ClientConnInterface) WorktabdClient {
	return &worktabdClient{cc}
}

func (c *worktabdClient) ServerVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerVersionResponse, error) {
	out := new(ServerVersionResponse)
	err := c.cc.Invoke(ctx, Worktabd_ServerVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorktabdServer is the server API for Worktabd service.
// All implementations must embed UnimplementedWorktabdServer
// for forward compatibility
type WorktabdServer interface {
	ServerVersion(context.Context, *Empty) (*ServerVersionResponse, error)
	mustEmbedUnimplementedWorktabdServer()
}

// UnimplementedWorktabdServer must be embedded to have forward compatible implementations.
type UnimplementedWorktabdServer struct {
}

func (UnimplementedWorktabdServer) ServerVersion(context.Context, *Empty) (*ServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerVersion not implemented")
}
func (UnimplementedWorktabdServer) mustEmbedUnimplementedWorktabdServer() {}

// UnsafeWorktabdServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorktabdServer will
// result in compilation errors.
type UnsafeWorktabdServer interface {
	mustEmbedUnimplementedWorktabdServer()
}

func RegisterWorktabdServer(s grpc.ServiceRegistrar, srv WorktabdServer) {
	s.RegisterService(&Worktabd_ServiceDesc, srv)
}

func _Worktabd_ServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorktabdServer).ServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worktabd_ServerVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorktabdServer).ServerVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Worktabd_ServiceDesc is the grpc.ServiceDesc for Worktabd service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worktabd_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "worktabdpb.worktabd",
	HandlerType: (*WorktabdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServerVersion",
			Handler:    _Worktabd_ServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worktabd.proto",
}
