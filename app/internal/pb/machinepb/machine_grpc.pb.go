// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: machine.proto

package machinepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Machine_MachineVersion_FullMethodName = "/machinepb.machine/MachineVersion"
	Machine_Create_FullMethodName         = "/machinepb.machine/Create"
)

// MachineClient is the client API for Machine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MachineClient interface {
	MachineVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MachineVersionResponse, error)
	Create(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type machineClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineClient(cc grpc.ClientConnInterface) MachineClient {
	return &machineClient{cc}
}

func (c *machineClient) MachineVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MachineVersionResponse, error) {
	out := new(MachineVersionResponse)
	err := c.cc.Invoke(ctx, Machine_MachineVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) Create(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Machine_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineServer is the server API for Machine service.
// All implementations must embed UnimplementedMachineServer
// for forward compatibility
type MachineServer interface {
	MachineVersion(context.Context, *Empty) (*MachineVersionResponse, error)
	Create(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedMachineServer()
}

// UnimplementedMachineServer must be embedded to have forward compatible implementations.
type UnimplementedMachineServer struct {
}

func (UnimplementedMachineServer) MachineVersion(context.Context, *Empty) (*MachineVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MachineVersion not implemented")
}
func (UnimplementedMachineServer) Create(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMachineServer) mustEmbedUnimplementedMachineServer() {}

// UnsafeMachineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MachineServer will
// result in compilation errors.
type UnsafeMachineServer interface {
	mustEmbedUnimplementedMachineServer()
}

func RegisterMachineServer(s grpc.ServiceRegistrar, srv MachineServer) {
	s.RegisterService(&Machine_ServiceDesc, srv)
}

func _Machine_MachineVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).MachineVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machine_MachineVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).MachineVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Machine_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).Create(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Machine_ServiceDesc is the grpc.ServiceDesc for Machine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Machine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "machinepb.machine",
	HandlerType: (*MachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MachineVersion",
			Handler:    _Machine_MachineVersion_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Machine_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "machine.proto",
}
