// Code generated by goctl. DO NOT EDIT.

package credential

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	credentialFieldNames          = builder.RawFieldNames(&Credential{})
	credentialRows                = strings.Join(credentialFieldNames, ",")
	credentialRowsExpectAutoSet   = strings.Join(stringx.Remove(credentialFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	credentialRowsWithPlaceHolder = strings.Join(stringx.Remove(credentialFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	credentialModel interface {
		Insert(ctx context.Context, data *Credential) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Credential, error)
		Update(ctx context.Context, data *Credential) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCredentialModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Credential struct {
		Id       int64     `db:"id"`
		Name     string    `db:"name"` // The credential name
		Type     int64     `db:"type"` // The credential type, 0:normal,1:vip, for test golang keyword
		CreateAt time.Time `db:"create_at"`
		UpdateAt time.Time `db:"update_at"`
	}
)

func newCredentialModel(conn sqlx.SqlConn) *defaultCredentialModel {
	return &defaultCredentialModel{
		conn:  conn,
		table: "`credential`",
	}
}

func (m *defaultCredentialModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCredentialModel) FindOne(ctx context.Context, id int64) (*Credential, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", credentialRows, m.table)
	var resp Credential
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCredentialModel) Insert(ctx context.Context, data *Credential) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, credentialRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type)
	return ret, err
}

func (m *defaultCredentialModel) Update(ctx context.Context, data *Credential) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, credentialRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Type, data.Id)
	return err
}

func (m *defaultCredentialModel) tableName() string {
	return m.table
}
