{{define "methodDefine"}}{{.MethodName}}({{if or .IsStreamServer .IsStreamClient .IsSpecified}}{{else}}ctx context.Context,{{end}}{{ .Request.FullName }}) ({{if or .IsStreamServer .IsStreamClient .IsSpecified}}*rest.Request{{else}}{{.Response.FullName}}{{end}}, error){{end}}
// Code generated by jzero. DO NOT EDIT.
// type: {{.Resource}}

package {{.Scope}}

import (
    "context"

    {{range $v := .GoImportPaths | uniq}}"{{$v}}"
    {{end}}
    "{{.GoModule}}/rest"
)

var (
    _ = context.Background()
)

type {{.Resource | FirstUpper}}Getter interface {
	{{.Resource | FirstUpper}}() {{.Resource | FirstUpper}}Interface
}

type {{.Resource | FirstUpper}}Interface interface {
	{{range $k, $v := .HTTPInterfaces}}// API {{$v.URL}} {{.Comments}}
	{{template "methodDefine" $v}}
	{{end}}
	{{.Resource | FirstUpper}}Expansion
}

type {{.Resource}}Client struct {
	client rest.Interface
}

func new{{.Resource | FirstUpper}}Client(c *{{.Scope | FirstUpper}}Client) *{{.Resource}}Client {
	return &{{.Resource}}Client{
		client: c.RESTClient(),
	}
}

{{range $k, $v := .HTTPInterfaces}}func (x *{{$.Resource}}Client) {{template "methodDefine" $v}} {
	{{if or $v.IsStreamServer $v.IsStreamClient $v.IsSpecified}}request := x.client.Verb("{{$v.Method}}").
		SubPath(
			"{{$v.URL}}",{{range $p := $v.PathParams}}
			rest.PathParam{Name: "{{$p.Name}}", Value: param.{{$p.GoName}}},{{end}}
		)
	return request, nil{{else}}var resp {{$v.Response.FullName}}
		err := x.client.Verb("{{$v.Method}}").
		SubPath(
			"{{$v.URL}}",{{range $p := $v.PathParams}}
			rest.PathParam{Name: "{{$p.Name}}", Value: param.{{$p.GoName}}},{{end}}
		).
		Params({{if eq $v.Request.Body "*"}}{{else}}{{range $q := $v.QueryParams}}
			rest.QueryParam{Name: "{{$q.Name}}", Value: param.{{$q.GoName}}},{{end}}{{end}}
		).
		Body({{if eq $v.Request.Body ""}}nil{{else if eq $v.Request.Body "*"}}param{{else if ne $v.Method "GET"}}param.{{$v.Request.RealBodyName}}{{else}}nil{{end}}).
		Do(ctx).
		Into(&resp, {{$.IsWrapHTTPResponse}})

	if err != nil {
		return nil, err
	}

	return resp, nil{{end}}
}

{{end}}